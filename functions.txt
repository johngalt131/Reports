
void set_date(date date);
void set_cleared_val(int cleared_val);
void set_description(std::string description);
void set_debit_val(float debit_val);
void set_num(int num);
void set_category(std::string category);
void set_budget_category(std::string budget_category);
void set_notes(std::string notes);
void set_account(std::string account);
void set_discretionary(bool discretionary);
void set_credit_val(float credit_val);
void set_order(short order);
void set_repay(bool repay);
void set_pending_total(float pending_total);
void set_reconciled_val(float reconciled_val);
void set_cleared_balance(float cleared_balance);
void set_reconciled_balance(float reconciled_balance);
void set_total_discretionary(float total_discretionary);
void set_discretionary_amt(float discretionary_amt);

date get_date(void);
int get_cleared_val(void);
std::string get_description(void);
float get_debit_val(void);
int get_num(void);
std::string get_category(void);
std::string get_budget_category(void);
std::string get_notes(void);
std::string get_account(void);
bool get_discretionary(void);
float get_credit_val(void);
short get_order(void);
bool get_repay(void);
float get_pending_total(void);
float get_reconciled_val(void);
float get_cleared_balance(void);
float get_reconciled_balance(void);
float get_total_discretionary(void);
float get_discretionary_amt(void);

date _date;
int _cleared_val;
std::string _description;
float _debit_val;
int _num;
std::string _category;
std::string _budget_category;
std::string _notes;
std::string _account;
bool _discretionary;
float _credit_val;
short _order;
bool _repay;
float _pending_total;
float _reconciled_val;
float _cleared_balance;
float _reconciled_balance;
float _total_discretionary;
float _discretionary_amt;

case DATE:
set_DATE(child->GetText());
break;
case CLEARED_VAL:
set_CLEARED_VAL(child->GetText());
break;
case DESCRIPTION:
set_DESCRIPTION(child->GetText());
break;
case DEBIT_VAL:
set_DEBIT_VAL(child->GetText());
break;
case NUM:
set_NUM(child->GetText());
break;
case CATEGORY:
set_CATEGORY(child->GetText());
break;
case BUDGET_CATEGORY:
set_BUDGET_CATEGORY(child->GetText());
break;
case NOTES:
set_NOTES(child->GetText());
break;
case ACCOUNT:
set_ACCOUNT(child->GetText());
break;
case DISCRETIONARY:
set_DISCRETIONARY(child->GetText());
break;
case CREDIT_VAL:
set_CREDIT_VAL(child->GetText());
break;
case ORDER:
set_ORDER(child->GetText());
break;
case REPAY:
set_REPAY(child->GetText());
break;
case PENDING_TOTAL:
set_PENDING_TOTAL(child->GetText());
break;
case RECONCILED_VAL:
set_RECONCILED_VAL(child->GetText());
break;
case CLEARED_BALANCE:
set_CLEARED_BALANCE(child->GetText());
break;
case RECONCILED_BALANCE:
set_RECONCILED_BALANCE(child->GetText());
break;
case TOTAL_DISCRETIONARY:
set_TOTAL_DISCRETIONARY(child->GetText());
break;
case DISCRETIONARY_AMT:
set_DISCRETIONARY_AMT(child->GetText());
break;


void Financial::set_date(date date){
WHAT THE FUCK. Specify the right type

_date = ;
}
void Financial::set_cleared_val(int cleared_val){

std::stringstream string_to_int;
string_to_int << cleared_val;
_cleared_val = string_to_int;
}
void Financial::set_description(std::string description){

std::stringstream string_to_int;
string_to_int << cleared_val;
_description = description;
}
void Financial::set_debit_val(float debit_val){

std::stringstream string_to_float;
string_to_float << debit_val;
_debit_val = string_to_float;
}
void Financial::set_num(int num){

std::stringstream string_to_int;
string_to_int << num;
_num = string_to_int;
}
void Financial::set_category(std::string category){

std::stringstream string_to_int;
string_to_int << num;
_category = category;
}
void Financial::set_budget_category(std::string budget_category){

std::stringstream string_to_int;
string_to_int << num;
_budget_category = budget_category;
}
void Financial::set_notes(std::string notes){

std::stringstream string_to_int;
string_to_int << num;
_notes = notes;
}
void Financial::set_account(std::string account){

std::stringstream string_to_int;
string_to_int << num;
_account = account;
}
void Financial::set_discretionary(bool discretionary){

std::stringstream string_to_int;
string_to_int << num;
_discretionary = account;
}
void Financial::set_credit_val(float credit_val){

std::stringstream string_to_float;
string_to_float << credit_val;
_credit_val = string_to_float;
}
void Financial::set_order(short order){

std::stringstream string_to_short;
string_to_short << order;
_order = string_to_short;
}
void Financial::set_repay(bool repay){

std::stringstream string_to_short;
string_to_short << order;
_repay = string_to_short;
}
void Financial::set_pending_total(float pending_total){

std::stringstream string_to_float;
string_to_float << pending_total;
_pending_total = string_to_float;
}
void Financial::set_reconciled_val(float reconciled_val){

std::stringstream string_to_float;
string_to_float << reconciled_val;
_reconciled_val = string_to_float;
}
void Financial::set_cleared_balance(float cleared_balance){

std::stringstream string_to_float;
string_to_float << cleared_balance;
_cleared_balance = string_to_float;
}
void Financial::set_reconciled_balance(float reconciled_balance){

std::stringstream string_to_float;
string_to_float << reconciled_balance;
_reconciled_balance = string_to_float;
}
void Financial::set_total_discretionary(float total_discretionary){

std::stringstream string_to_float;
string_to_float << total_discretionary;
_total_discretionary = string_to_float;
}
void Financial::set_discretionary_amt(float discretionary_amt){

std::stringstream string_to_float;
string_to_float << discretionary_amt;
_discretionary_amt = string_to_float;
}

date Financial::get_date(){
return _date;
}
int Financial::get_cleared_val(){
return _cleared_val;
}
std::string Financial::get_description(){
return _description;
}
float Financial::get_debit_val(){
return _debit_val;
}
int Financial::get_num(){
return _num;
}
std::string Financial::get_category(){
return _category;
}
std::string Financial::get_budget_category(){
return _budget_category;
}
std::string Financial::get_notes(){
return _notes;
}
std::string Financial::get_account(){
return _account;
}
bool Financial::get_discretionary(){
return _discretionary;
}
float Financial::get_credit_val(){
return _credit_val;
}
short Financial::get_order(){
return _order;
}
bool Financial::get_repay(){
return _repay;
}
float Financial::get_pending_total(){
return _pending_total;
}
float Financial::get_reconciled_val(){
return _reconciled_val;
}
float Financial::get_cleared_balance(){
return _cleared_balance;
}
float Financial::get_reconciled_balance(){
return _reconciled_balance;
}
float Financial::get_total_discretionary(){
return _total_discretionary;
}
float Financial::get_discretionary_amt(){
return _discretionary_amt;
}
