#include <vector>
#include <string>
#include <stdlib.h>
#include <stdio.h>

#include "tinyxml.h"
#include "Filters.h"

void Filters::Filters::Configure(){
  TiXmlDocument *Doc = NULL;
  TiXmlElement *root,*config,*property;
  Doc = new TiXmlDocument(config_file);
  if( Doc->LoadFile() ){
    root = Doc->FirstChildElement("root");
    config = root->FirstChildElement("config");
    _filename = config->Attribute("InputFile");
    _fieldsFile = config->Attribute("FieldsFile");
    delete Doc;
  }
  Doc = new TiXmlDocument(_fieldsFile);
  if( Doc->LoadFile() ){
    root = Doc->FirstChildElement("Root");
    property = root->FirstChildElement("Property");
    for( ; property != NULL; property = property->NextSiblingElement("Property")){
      std::string temp = property->Attribute("name");
      name2Type[temp] = property->Attribute("type");
    }
    delete Doc;
  }

}
template <typename T>
bool Filters::Filter::IsSatisfied(T test_value){
  switch(_type){
  case EQUAL:
    if(test_value == _value){
      return true;
    }else{
      return false;
    }
    break;
  case LESS_THAN:
    if(test_value < _value){
      return true;
    }else{
      return false;
    }
    break;
  case LESS_THAN_OR_EQUAL:
    if(test_value <= _value){
      return true;
    }else{
      return false;
    }
    break;
  case GREATER_THAN:
    if(test_value > _value){
      return true;
    }else{
      return false;
    }
    break;
  case GREATER_THAN_OR_EQUAL:
    if(test_value >= _value){
      return true;
    }else{
      return false;
    }
    break;
  case NOT_EQUAL:
    if(test_value != _value){
      return true;
    }else{
      return false;
    }
    break;
  }
}


#if 4 == 5
void Filters::Filters::TestAll(std::vector<Filterable> &testObject){
  
}
#endif
